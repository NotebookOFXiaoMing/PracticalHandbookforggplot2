[["index.html", "R语言ggplot2科研数据可视化实用手册 Chapter 1 R语言、Rstudio、R包ggplot2安装 (win10) 1.1 R语言官网 1.2 Rstudio官网", " R语言ggplot2科研数据可视化实用手册 闫明 2022年5月9号 Chapter 1 R语言、Rstudio、R包ggplot2安装 (win10) 1.1 R语言官网 R,最新版是4.2,我们安装的时候可以选择比最新版稍微第一个版本的4.1进行安装 1.2 Rstudio官网 Rstudio "],["绘图数据准备.html", "Chapter 2 绘图数据准备 2.1 文件的路径 2.2 读取数据 2.3 读取数据集以后对数据集进行操作", " Chapter 2 绘图数据准备 我们准备数据最常用的有两种选择： 一是文本文件存储数据 另外就是使用excel来准备数据 如果能够用电脑上的记事本打开查看里面的内容没有乱码，都是文本文件，不管文件的后缀名是txt csv tsv或者其他，这里推荐的文本编辑器是notpad++，这个打开文本文件很好用 2.1 文件的路径 首先是数据存储的路径，路径就是指数据存储到了电脑的哪个文件夹，以win系统电脑为例就是 盘符:/文件夹/文件/ 比如 D:/xiaoming/data.csv，路径分为 绝对路径 相对路径 绝度路径就是从盘符开始写的这种，相对路径是相对于当前的工作目录你自己的数据存储在哪里，这个相对路径的概念刚开始理解起来可能不是很好理解，初学者我建议大家还是采用绝对路径的写法 2.2 读取数据 如果是文本文件的数据，R语言读取的时候可以直接使用read.table()函数,这个函数接受三个参数， 一个是数据文件的存储路径 file= 一个是数据文件里的分隔符号 sep= 分隔符号比较常用的是逗号和制表符,如果是逗号分隔的文件可以把文件的后缀名直接更改为.csv这样可以直接双击用excel打开，如果是制表符分隔的文件，可以把后缀名改成.tsv 还有一个参数是数据文件是否有表头 header= 等于号后面写TRUE或者FALSE,TRUE就是有表头，FALSE就是没有表头 以如下数据集为例,逗号作为分隔符 文件里每行元素之间是用逗号分隔，第一行是数据集的表头，读取数据的命令是 dat01 &lt;- read.table(file = &quot;D:/Bookofggplot2/PracticalHandbookforggplot2/example_data/02-preparedata/dat01.txt&quot;,header = TRUE,sep=&quot;,&quot;) dat01 ## var1 var2 var3 ## 1 A 1 2 ## 2 B 1 3 这里 - read.table()里的内容是读取数据 &lt;- 这个符号是赋值 dat01是给读取进来的数据集起个名字 这个名字可以自己随便起，只要以字母开头就行 如下数据为例，制表符作为分隔符，制表符的表示方式是\\t 文件里每行元素之间是用逗号分隔，第一行是数据集的表头，读取数据的命令是 dat02 &lt;- read.table(file = &quot;D:/Bookofggplot2/PracticalHandbookforggplot2/example_data/02-preparedata/dat02.txt&quot;,header = TRUE,sep=&quot;\\t&quot;) dat02 ## var1..var2..var3 ## 1 1 2 3 ## 2 2 3 4 如果数据集没有表头，我们将header参数指定为FALSE dat03 &lt;- read.table(file = &quot;D:/Bookofggplot2/PracticalHandbookforggplot2/example_data/02-preparedata/dat03.txt&quot;,header = TRUE,sep=&quot;,&quot;) dat03 ## X1 X2 X3 ## 1 4 5 6 常用的分隔符号还有空格，如果空格作为分隔符的话，我们需要把sep=后面的双引号里直接敲一个空格就行了 因为逗号是非常常用的分隔符，R语言也提供了专门针对这种分隔符的读取数据函数read.csv()，但是作为初学者我建议大家还是直接使用read.table()函数，熟练了以后再探索其他数据读取函数 以上内容介绍的是读取文本文件的数据 如果想要读取excel存储的数据，一个办法是将excel转换为csv文件，然后通过read.table()函数来读取 另外的方式就是安装R包readxl,这个R包里有可以直接读取excel文件的函数read_excel(),直接运行install.packages(\"readxl\")命令联网就可以安装。read_excel()读取数据的时候一般需要准备两个参数，一个是path数据文件的路径，另外一个是col_names数据集是否有表头 示例数据集如下 这里需要注意一点是readxl这个R包每次使用都要运行library(readxl)加载这个R包 library(readxl) dat04 &lt;- read_excel(path = &quot;D:/Bookofggplot2/PracticalHandbookforggplot2/example_data/02-preparedata/dat04.xlsx&quot;,col_names = TRUE) dat04 ## # A tibble: 3 x 3 ## var1 var2 var3 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 10 2 ## 2 B 20 4 ## 3 C 23 5 2.3 读取数据集以后对数据集进行操作 "],["r语言ggplot2散点图.html", "Chapter 3 R语言ggplot2散点图", " Chapter 3 R语言ggplot2散点图 "],["r语言ggplot2柱形图.html", "Chapter 4 R语言ggplot2柱形图 4.1 最基本的柱形图需要准备的数据 4.2 簇状柱形图 4.3 堆积柱形图", " Chapter 4 R语言ggplot2柱形图 4.1 最基本的柱形图需要准备的数据 一列x一列y 如果柱子垂直 x是离散型数据 y是连续型数据 如果想要水平的柱子，就把y设置成离散数据，x设置成连续数据 数据集 var1 var2 A 1 B 2 C 3 D 4 E 5 读取数据集 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat01.xlsx&quot;) head(dat01) ## # A tibble: 5 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 1 ## 2 B 2 ## 3 C 3 ## 4 D 4 ## 5 E 5 作图代码 柱形图的函数有geom_col()和geom_bar(),具体有什么区别我没有仔细研究过，我自己习惯用geom_col()函数，做堆积柱形图和簇状柱形图的时候会使用geom_bar()函数 柱形图可以修改的参数分别是 color对应柱子的边框颜色 size 对应是边框的粗细 fill对应柱子的填充颜色 alpha对应的是柱子填充颜色的透明度，取值是0到1之间 width对应柱子的宽度 看如下代码的效果，你可以试着更改每个参数的值 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat01.xlsx&quot;) head(dat01) ## # A tibble: 5 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 1 ## 2 B 2 ## 3 C 3 ## 4 D 4 ## 5 E 5 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_col(color=&quot;red&quot;,size=3, fill=&quot;blue&quot;,alpha=0.5, width = 0.2) 如果统一修改边框颜色，填充颜色这些属性，比如上面的例子，5个柱子全都设置成一样的，就把参数设置到aes()的外面。如果想要用数据中的某一列来映射颜色。需要把参数写到aes()的里面。 柱形图还有一个比较常用的操作是添加误差线，这里假设已经算好了标准差，我们将标准差整理到数据集里，格式如下 添加误差线的函数是geom_errorbar() 如果是垂直与x轴的误差线，需要制定ymin和ymax两个参数 作图代码 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 5 x 3 ## var1 var2 sd_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 1 0.5 ## 2 B 2 0.5 ## 3 C 3 0.5 ## 4 D 4 0.5 ## 5 E 5 0.5 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_col()+ geom_errorbar(aes(ymin=var2-sd_value, ymax=var2+sd_value)) 误差线函数比较常用的三个参数是 width 调节误差线的宽度 color 误差线的颜色 lty 线的类型，就是实线 虚线 这些 更改这三个参数 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 5 x 3 ## var1 var2 sd_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 1 0.5 ## 2 B 2 0.5 ## 3 C 3 0.5 ## 4 D 4 0.5 ## 5 E 5 0.5 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_col(fill=&quot;grey&quot;)+ geom_errorbar(aes(ymin=var2-sd_value, ymax=var2+sd_value), color=&quot;red&quot;, width=0.4, lty=&quot;dashed&quot;) 柱形图还有一个比较常用的操作是组间比较，做统计检验后添加p值或者显著性的星号，这里还是假设已经做好了统计检验，这里使用annotate()函数来添加线段和文本。这里有一个知识点是如果是离散数据作为x轴，第一个柱子的横坐标是1,第二个第三个依次是2，和3 这样 首先是annotate()函数添加添加文本，需要制定四个内容， 添加注释的类型 文本是geom = “text” 添加文本的位置 一个 x 和一个 y 添加文本的内容 label = “ABC” 如下代码 我在 A B 两个柱子中间 横坐标是1.5 纵坐标3的位置添加一个P value = 0.01的文本,设置文本的颜色为蓝色 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 5 x 3 ## var1 var2 sd_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 1 0.5 ## 2 B 2 0.5 ## 3 C 3 0.5 ## 4 D 4 0.5 ## 5 E 5 0.5 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_col(fill=&quot;grey&quot;)+ geom_errorbar(aes(ymin=var2-sd_value, ymax=var2+sd_value), color=&quot;red&quot;, width=0.4, lty=&quot;dashed&quot;)+ annotate(geom = &quot;text&quot;,x=1.5,y=3, label=&quot;P value = 0.01&quot;,color=&quot;blue&quot;) 接下来是添加注释的线段，线段需要制定的参数是 geom=“segment” 线段的起始位置 x,y 线段的终止位置x y 还可以更改颜色 线型 粗细 之类的 看如下代码 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 5 x 3 ## var1 var2 sd_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 1 0.5 ## 2 B 2 0.5 ## 3 C 3 0.5 ## 4 D 4 0.5 ## 5 E 5 0.5 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_col(fill=&quot;grey&quot;)+ geom_errorbar(aes(ymin=var2-sd_value, ymax=var2+sd_value), color=&quot;red&quot;, width=0.4, lty=&quot;dashed&quot;)+ annotate(geom = &quot;text&quot;,x=1.5,y=3, label=&quot;P value = 0.01&quot;,color=&quot;blue&quot;)+ annotate(geom = &quot;segment&quot;,x=1,y=1.5,xend=1,yend=2.8, color=&quot;black&quot;,size=1) 接下来再来添加两个线段 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 5 x 3 ## var1 var2 sd_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 1 0.5 ## 2 B 2 0.5 ## 3 C 3 0.5 ## 4 D 4 0.5 ## 5 E 5 0.5 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_col(fill=&quot;grey&quot;)+ geom_errorbar(aes(ymin=var2-sd_value, ymax=var2+sd_value), color=&quot;red&quot;, width=0.4, lty=&quot;dashed&quot;)+ annotate(geom = &quot;text&quot;,x=1.5,y=3, label=&quot;P value = 0.01&quot;,color=&quot;blue&quot;)+ annotate(geom = &quot;segment&quot;,x=1,y=1.5,xend=1,yend=2.8, color=&quot;black&quot;,size=1)+ annotate(geom = &quot;segment&quot;,x=2,y=2.5,xend=2,yend=2.8, color=&quot;black&quot;,size=1)+ annotate(geom = &quot;segment&quot;,x=1,y=2.8,xend=2,yend=2.8, color=&quot;black&quot;,size=1) 用这个annotate()函数相对来说会比较繁琐，如果要添加比较多的线段的话代码会很长，但是这个可定制性比较强，我目前还想不到其他比较合适的替代方案 4.2 簇状柱形图 参考链接 https://r-graph-gallery.com/48-grouped-barplot-with-ggplot2.html 数据格式如下 var1 var2 value group1 A 13.411067 group1 B 6.884985 group1 C 37.514516 group2 A 25.970176 group2 B 12.292093 group2 C 10.388148 group3 A 3.411084 group3 B 2.060476 group3 C 9.582556 group4 A 4.190190 group4 B 11.724548 group4 C 3.871083 作图代码 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;dodge&quot;) 这里stat=\"identity\"我一直没有搞清楚是什么意思,记住是必须要写的 如果不加position=\"dodge\"默认是堆积柱形图 堆积柱形图的position应该设置为position=\"stack\" 簇状柱形图比较常用的修改参数是 不同组之前的显示顺序，默认是首字母 组内不同柱子的的排序，默认也是首字母 涉及到顺序的都是调节数据集的因子水平 代码 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot.xlsx&quot;) dat01$var1&lt;-factor(dat01$var1, levels = c(&quot;group3&quot;,&quot;group2&quot;,&quot;group4&quot;,&quot;group1&quot;)) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;dodge&quot;) dat01$var2&lt;-factor(dat01$var2, levels = c(&quot;B&quot;,&quot;C&quot;,&quot;A&quot;)) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;dodge&quot;) 堆积柱形图还有一个经常会遇到的问题是添加误差线，现在假设我们已经把标准差算好了，整理excel里，数据格式如下，在原有数据的基础上添加一列标准差的数据 var1 var2 value sd_value group1 A 13.411067 2 group1 B 6.884985 1 group1 C 37.514516 3 group2 A 25.970176 2 group2 B 12.292093 1 group2 C 10.388148 3 group3 A 3.411084 2 group3 B 2.060476 1 group3 C 9.582556 3 group4 A 4.190190 2 group4 B 11.724548 1 group4 C 3.871083 3 添加误差线的函数是 geom_errorbar() 作图代码 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot_01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;dodge&quot;)+ geom_errorbar(aes(ymin=value-sd_value, ymax=value+sd_value)) 误差线主要的调节参数就两个，一个是width误差线的宽度，一个是color颜色 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot_01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;dodge&quot;)+ geom_errorbar(aes(ymin=value-sd_value, ymax=value+sd_value), width=0.4, color=&quot;grey&quot;) 簇状柱形图的误差线全部集中在同一位置，需要我们用参数position = position_dodge(1)调节开,这里需要注意一点是如果调节误差线的位置，需要把fill=var2参数写到ggplot里，position_dodge()里面的数值具体应该设置多少我也搞不清楚，每次都要设置好几次 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot_01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value,fill=var2))+ geom_bar(stat=&quot;identity&quot;, position = &quot;dodge&quot;)+ geom_errorbar(aes(ymin=value-sd_value, ymax=value+sd_value), width=0.4, color=&quot;blue&quot;, position = position_dodge(0.9)) 其他的美化，比如让柱子贴着底，坐标轴标签，更改默认配色等 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot_01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value,fill=var2))+ geom_bar(stat=&quot;identity&quot;, position = &quot;dodge&quot;)+ geom_errorbar(aes(ymin=value-sd_value, ymax=value+sd_value), width=0.4, color=&quot;blue&quot;, position = position_dodge(0.9))+ scale_y_continuous(expand=expansion(mult=c(0,0.1)))+ scale_fill_manual(values = c(&quot;A&quot;=&quot;grey&quot;,&quot;B&quot;=&quot;black&quot;,&quot;C&quot;=&quot;green&quot;))+ labs(x=&quot;AAAAA&quot;,y=&quot;BBBBB&quot;) 4.2.1 接下来看每周一图里面的例子 这里 aes()的内容是可以写到作图函数里，也可以写到ggplot里，这里还是有区别的，比如上面提到的误差线的位置调节 library(readr) success_rates&lt;-read_csv(&quot;example_data/04-barplot/success_rates.csv&quot;) library(ggplot2) ggplot(success_rates) + # add bar for each discipline colored by gender geom_bar(aes(x = discipline, y = success, fill = gender), stat = &quot;identity&quot;, position = &quot;dodge&quot;) + # name axes and remove gap between bars and y-axis scale_y_continuous(&quot;Success Rate&quot;, expand = c(0, 0)) + scale_x_discrete(&quot;Discipline&quot;) + scale_fill_manual(values = c(&quot;#468189&quot;, &quot;#9DBEBB&quot;)) + # remove grey theme theme_classic(base_size = 18) + # rotate x-axis and remove superfluous axis elements theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0), axis.line = element_blank(), axis.ticks.x = element_blank()) 4.3 堆积柱形图 堆积柱形图和簇状柱形图的数据格式是一样的，自己的数据具体需要用堆积柱形图还是簇状柱形图自己斟酌，堆积柱形图我们只需要把簇状柱形图对应的position=\"dodge\"改成position=\"stack\"就可以了 dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;stack&quot;) 堆积柱形图有一个特点是除了展示真实数据外，还可以展示比例,需要我们把position=\"stack\"改成position=\"fill\" dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;fill&quot;) 接下来就是更改柱子的顺序，和簇状柱形图调节顺序一样，只要更改原始数据的因子水平,默认的顺序是从上往下排的 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot.xlsx&quot;) dat01$var1&lt;-factor(dat01$var1, levels = c(&quot;group3&quot;,&quot;group2&quot;,&quot;group4&quot;,&quot;group1&quot;)) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;stack&quot;) dat01$var2&lt;-factor(dat01$var2, levels = c(&quot;B&quot;,&quot;C&quot;,&quot;A&quot;)) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;stack&quot;) 堆积柱形图添加误差线不常用，但也有人有这个需求，需要对原始数据有一个累加处理用来指定误差线的y坐标 library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot_01.xlsx&quot;) library(tidyverse) dat01 %&gt;% group_by(var1) %&gt;% mutate(new_col=cumsum(value)) -&gt; dat01 readr::write_csv(dat01,file=&quot;example_data/04-barplot/dat02_grouped_barplot_01.csv&quot;) dat01$var2&lt;-factor(dat01$var2, levels = c(&quot;C&quot;,&quot;B&quot;,&quot;A&quot;)) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;stack&quot;)+ geom_errorbar(aes(ymin=new_col-sd_value, ymax=new_col+sd_value), width=0.4, color=&quot;grey&quot;) 堆积柱形图还有一个经常遇到的问题是在图上添加文字，我们自数据集里添加新的列指定文本标签和文本标签的坐标, library(readxl) dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot_02.xlsx&quot;) knitr::kable(dat01, &quot;simple&quot;) var1 var2 value sd_value text_y text group1 A 13.411067 2 45 a group1 B 6.884985 1 40 b group1 C 37.514516 3 20 c group2 A 25.970176 2 40 d group2 B 12.292093 1 18 e group2 C 10.388148 3 5 f group3 A 3.411084 2 12 g group3 B 2.060476 1 11 h group3 C 9.582556 3 5 i group4 A 4.190190 2 18 j group4 B 11.724548 1 10 k group4 C 3.871083 3 2 l 添加文本用到的函数是geom_text() dat01&lt;-read_excel(&quot;example_data/04-barplot/dat02_grouped_barplot_02.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=value))+ geom_bar(stat=&quot;identity&quot;, aes(fill=var2), position = &quot;stack&quot;)+ geom_text(aes(x=var1,y=text_y,label=text)) 美化 更改配色 4.3.1 实际例子 library(readr) library(tidyverse) bechdel_test_df&lt;-read_csv(&quot;example_data/04-barplot/bechdel_test_df.csv&quot;) ## Rows: 43 Columns: 4 ## -- Column specification ------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (2): year_group, clean_test ## dbl (2): category_count, category_prop ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. bechdel_test_text &lt;- read_csv(&quot;example_data/04-barplot/bechdel_test_text.csv&quot;) ## Rows: 5 Columns: 8 ## -- Column specification ------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (3): year_group, clean_test, label ## dbl (5): category_count, category_prop, prop_cum, prop_cum_lag, y ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. bechdel_step_df &lt;- read_csv(&quot;example_data/04-barplot/bechdel_step_df.csv&quot;) ## Rows: 9 Columns: 6 ## -- Column specification ------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (1): year_group ## dbl (5): category_prop, x_coord, x_end_coord, y_coord, y_end_coord ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. library(ggplot2) bechdel_test_df %&gt;% mutate(clean_test = factor(clean_test, levels = c(&quot;ok&quot;, &quot;dubious&quot;, &quot;men&quot;, &quot;notalk&quot;, &quot;nowomen&quot;)), clean_test = fct_rev(clean_test)) %&gt;% ggplot(aes(year_group, category_prop)) + geom_col(aes(fill = clean_test), width = 1, color = &quot;white&quot;, size = 0.6, show.legend = FALSE) + geom_segment(data = bechdel_step_df, aes(x = x_coord, xend = x_end_coord, y = category_prop, yend = category_prop), size = 1.5) + geom_segment(data = filter(bechdel_step_df, year_group != &quot;2010 -\\n&#39;13&quot;), aes(x = x_end_coord, xend = x_end_coord, y = y_coord, yend = y_end_coord), lineend = &quot;round&quot;, size = 1.5) + geom_segment(aes(x = 0.12, xend = 9.5, y = 0, yend = 0), size = 0.8) + geom_segment(aes(x = 0.25, xend = 9.5, y = 1, yend = 1), size = 0.8, color = &quot;#cdcdcd&quot;) + geom_segment(data = tibble(x = 0.12, xend = 0.5, y = c(0.25, 0.5, 0.75)), aes(x = x, xend = xend, y = y, yend = y), size = 0.8, color = &quot;#cdcdcd&quot;) + geom_text(data = tibble(x = 0, y = c(0, 0.25, 0.5, 0.75, 1), label = c(0, 25, 50, 75, 100)), aes(x = x, y = y, label = label), family = &quot;serif&quot;, size = 6, hjust = 1) + geom_text(data = tibble(x = 0.2, y = 1, label = &quot;%&quot;), aes(x = x, y = y, label = label), family = &quot;serif&quot;, size = 7, hjust = 1) + geom_text(data = tibble(x = c(0.5, 2.5, 4.5, 6.5, 8.5), y = -0.06, label = c(&quot;1970-\\n&#39;74&quot;, &quot;1980-\\n&#39;84&quot;, &quot;1990-\\n&#39;94&quot;, &quot;2000-\\n&#39;04&quot;, &quot;2010-\\n&#39;13&quot;)), aes(x = x, y = y, label = label), family = &quot;serif&quot;, size = 6, hjust = -0.2, lineheight = 0.55) + geom_segment(data = bechdel_test_text, aes(x = 9.5, xend = 9.75, y = y, yend = y), size = 0.8) + geom_text(data = bechdel_test_text, aes(x = 9.85, y = y, label = label), family = &quot;serif&quot;, hjust = 0, vjust = 0.5, size = 6, lineheight = 0.6) + annotate(&quot;text&quot;, x = 3.75, y = 0.22, label = &quot;PASS&quot;, family = &quot;serif&quot;, fontface = &quot;bold&quot;, size = 25, hjust = 0, vjust = 0.5) + annotate(&quot;text&quot;, x = 4, y = 0.75, label = &quot;FAIL&quot;, family = &quot;serif&quot;, fontface = &quot;bold&quot;, size = 25, hjust = 0, vjust = 0.5) + scale_y_continuous(expand = c(0, 0)) + scale_fill_manual(values = c(&quot;ok&quot; = &quot;#008fd5&quot;, &quot;dubious&quot; = &quot;#6bb2d5&quot;, &quot;men&quot; = &quot;#ffc9bf&quot;, &quot;notalk&quot; = &quot;#ff9380&quot;, &quot;nowomen&quot; = &quot;#ff2700&quot;)) + labs(title = &quot;The Bechdel Test Over Time&quot;, subtitle = &quot;How women are represented in movies&quot;, x = &quot;&quot;, y = &quot;&quot;, caption = &quot;Original plot by Fivethirtyeight | Replicated in R by Kaustav Sen&quot;) + coord_cartesian(clip = &quot;off&quot;) + theme_void() + theme( plot.title.position = &quot;plot&quot;, plot.title = element_text(family = &quot;serif&quot;, face = &quot;bold&quot;, size = 30, hjust = -0.12, margin = margin(b = 5)), plot.subtitle = element_text(family = &quot;serif&quot;, size = 24, hjust = -0.12, margin = margin(b = 25)), plot.caption = element_text(family = &quot;serif&quot;, size = 14, hjust = 0.5, vjust = -25, color = &quot;grey70&quot;), plot.margin = margin(20, 90, 25, 45), plot.background = element_rect(fill = &quot;#f0f0f0&quot;, color = &quot;#f0f0f0&quot;) ) "],["r语言ggplot2箱线图.html", "Chapter 5 R语言ggplot2箱线图 5.1 首先是箱线图 5.2 接下来是带有分组的箱线图 5.3 接下来是小提琴图 5.4 类似于箱线图/小提琴图的还有", " Chapter 5 R语言ggplot2箱线图 这一章主要介绍的是 箱线图 小提琴图 蜂群图 山脊图 这类，因为他们的作用都是一样的，主要就是为了展示数据分布 5.1 首先是箱线图 最基本的箱线图需要准备两列数据 读取数据 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 做箱线图使用到的函数是geom_boxplot() 最基本的箱线图的代码 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_boxplot() 箱线图比较常修改的参数是 color 边框颜色 fill 填充颜色 width 箱子整体的宽度 如果要修改成统一的颜色，就把参数写到aes()的外面，参数值是真实的颜色 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_boxplot(color=&quot;red&quot;, fill=&quot;blue&quot;, width=0.2) 如果要根据不同的变量赋予不同的颜色，就把参数写到aes()的里面，参数值是数据的列名 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_boxplot(aes(fill=var1)) 箱线图还有一个比较常用的操作是添加顶部和底部的小短线，这个geom_boxplot()函数里好像没有专门的参数设置，需要我们借助误差线函数geom_errorbar()来添加,这里展示的不是真实误差，而是数据集的最大值和最小值 这里需要先生成一个新的数据集，每个变量的最小值和最大值 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(tidyverse) dat01 %&gt;% group_by(var1) %&gt;% summarise(max_value=max(var2), min_value=min(var2)) -&gt; dat01.1 dat01.1 ## # A tibble: 4 x 3 ## var1 max_value min_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PAR_CH 0.787 0.418 ## 2 PARTNERS 0.810 0.422 ## 3 RND.PAIR 0.884 0.354 ## 4 SIBL 0.709 0.315 用这个新的数据集添加小短线 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(tidyverse) dat01 %&gt;% group_by(var1) %&gt;% summarise(max_value=max(var2), min_value=min(var2)) -&gt; dat01.1 dat01.1 ## # A tibble: 4 x 3 ## var1 max_value min_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PAR_CH 0.787 0.418 ## 2 PARTNERS 0.810 0.422 ## 3 RND.PAIR 0.884 0.354 ## 4 SIBL 0.709 0.315 library(ggplot2) ggplot()+ geom_boxplot(data=dat01,aes(x=var1,y=var2,fill=var1))+ geom_errorbar(data=dat01.1, aes(x=var1, ymin=min_value, ymax=max_value)) ggplot()+ geom_errorbar(data=dat01.1, aes(x=var1, ymin=min_value, ymax=max_value))+ geom_boxplot(data=dat01,aes(x=var1,y=var2,fill=var1)) 这里有一个知识点是每一个作图函数都可以用不同的数据集，如果要在同一个图上用不同的数据集的话，尽量把数据集接到作图函数里，不写到ggplot()函数里 ggplot2作图是不同函数依次叠加，所以排在后面的函数生成的图形会把前面的覆盖掉，如果觉得有影响 调换一下函数的顺序就可以 误差线函数对应的可以修改的参数比较常用的就是 - width 宽度 - color 颜色 - lty 线型 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(tidyverse) dat01 %&gt;% group_by(var1) %&gt;% summarise(max_value=max(var2), min_value=min(var2)) -&gt; dat01.1 dat01.1 ## # A tibble: 4 x 3 ## var1 max_value min_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PAR_CH 0.787 0.418 ## 2 PARTNERS 0.810 0.422 ## 3 RND.PAIR 0.884 0.354 ## 4 SIBL 0.709 0.315 library(ggplot2) ggplot()+ geom_errorbar(data=dat01.1, aes(x=var1, ymin=min_value, ymax=max_value), color=&quot;red&quot;,width=0.3,lty=&quot;dashed&quot;)+ geom_boxplot(data=dat01,aes(x=var1,y=var2,fill=var1)) 箱线图有时候还会添加统计检验的显著性等信息，额外的注释信息都可以借助annotate()函数实现，这里的一个小知识点是离散变量的x轴第一个位置是x=1 annotate() 函数比较常用的是添加文本和线段 添加文本需要用到的参数是 - geom = “text” - x，y的坐标 - label 文本的内容 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(tidyverse) dat01 %&gt;% group_by(var1) %&gt;% summarise(max_value=max(var2), min_value=min(var2)) -&gt; dat01.1 dat01.1 ## # A tibble: 4 x 3 ## var1 max_value min_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PAR_CH 0.787 0.418 ## 2 PARTNERS 0.810 0.422 ## 3 RND.PAIR 0.884 0.354 ## 4 SIBL 0.709 0.315 library(ggplot2) ggplot()+ geom_errorbar(data=dat01.1, aes(x=var1, ymin=min_value, ymax=max_value), color=&quot;red&quot;,width=0.3,lty=&quot;dashed&quot;)+ geom_boxplot(data=dat01,aes(x=var1,y=var2,fill=var1))+ annotate(geom=&quot;text&quot;,x=1.5,y=0.85, label=&quot;Pvalue = 0.01&quot;,color=&quot;blue&quot;, fontface=&quot;italic&quot;) 添加线段需要用到的参数是 - geom = “segment” - 线段起始位置的x，y坐标和线段终止位置的x，y坐标 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(tidyverse) dat01 %&gt;% group_by(var1) %&gt;% summarise(max_value=max(var2), min_value=min(var2)) -&gt; dat01.1 dat01.1 ## # A tibble: 4 x 3 ## var1 max_value min_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PAR_CH 0.787 0.418 ## 2 PARTNERS 0.810 0.422 ## 3 RND.PAIR 0.884 0.354 ## 4 SIBL 0.709 0.315 library(ggplot2) ggplot()+ geom_errorbar(data=dat01.1, aes(x=var1, ymin=min_value, ymax=max_value), color=&quot;red&quot;,width=0.3,lty=&quot;dashed&quot;)+ geom_boxplot(data=dat01,aes(x=var1,y=var2,fill=var1))+ annotate(geom=&quot;text&quot;,x=1.5,y=0.85, label=&quot;Pvalue = 0.01&quot;,color=&quot;blue&quot;, fontface=&quot;italic&quot;)+ annotate(geom = &quot;segment&quot;, x = 1,y = 0.8, xend = 1,yend = 0.82, size=1) annotate()函数添加相对比较繁琐，但可定制性比较强 再来添加两条线段 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(tidyverse) dat01 %&gt;% group_by(var1) %&gt;% summarise(max_value=max(var2), min_value=min(var2)) -&gt; dat01.1 dat01.1 ## # A tibble: 4 x 3 ## var1 max_value min_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PAR_CH 0.787 0.418 ## 2 PARTNERS 0.810 0.422 ## 3 RND.PAIR 0.884 0.354 ## 4 SIBL 0.709 0.315 library(ggplot2) ggplot()+ geom_errorbar(data=dat01.1, aes(x=var1, ymin=min_value, ymax=max_value), color=&quot;red&quot;,width=0.3,lty=&quot;dashed&quot;)+ geom_boxplot(data=dat01,aes(x=var1,y=var2,fill=var1))+ annotate(geom=&quot;text&quot;,x=1.5,y=0.85, label=&quot;Pvalue = 0.01&quot;,color=&quot;blue&quot;, fontface=&quot;italic&quot;)+ annotate(geom = &quot;segment&quot;, x = 1,y = 0.8, xend = 1,yend = 0.82, size=1)+ annotate(geom = &quot;segment&quot;, x = 1,y = 0.82, xend = 2,yend = 0.82, size=1)+ annotate(geom = &quot;segment&quot;, x = 2,y = 0.82, xend = 2,yend = 0.815, size=1) 如果还想在不同的位置添加文本和线段，可以按照上述思路来设置 5.2 接下来是带有分组的箱线图 部分示例数据集如下 最基本的分组箱线图 library(readxl) dat02&lt;-read_excel(&quot;example_data/05-boxplot/dat02.xlsx&quot;) library(ggplot2) ggplot(data=dat02,aes(x=dose,y=len,fill=supp))+ geom_boxplot() 分组箱线图添加误差线,还是需要先生成一个新的数据集 library(readxl) dat02&lt;-read_excel(&quot;example_data/05-boxplot/dat02.xlsx&quot;) library(tidyverse) dat02 %&gt;% group_by(dose,supp) %&gt;% summarise(min_value=min(len), max_value=max(len)) -&gt; dat02.1 ## `summarise()` has grouped output by &#39;dose&#39;. You can override using ## the `.groups` argument. dat02.1 ## # A tibble: 6 x 4 ## # Groups: dose [3] ## dose supp min_value max_value ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 dose_1 OJ 8.2 21.5 ## 2 dose_1 VC 4.2 11.5 ## 3 dose_2 OJ 14.5 27.3 ## 4 dose_2 VC 13.6 22.5 ## 5 dose_3 OJ 22.4 30.9 ## 6 dose_3 VC 18.5 33.9 用算好的数据添加误差线 library(readxl) dat02&lt;-read_excel(&quot;example_data/05-boxplot/dat02.xlsx&quot;) library(tidyverse) dat02 %&gt;% group_by(dose,supp) %&gt;% summarise(min_value=min(len), max_value=max(len)) -&gt; dat02.1 ## `summarise()` has grouped output by &#39;dose&#39;. You can override using ## the `.groups` argument. dat02.1 ## # A tibble: 6 x 4 ## # Groups: dose [3] ## dose supp min_value max_value ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 dose_1 OJ 8.2 21.5 ## 2 dose_1 VC 4.2 11.5 ## 3 dose_2 OJ 14.5 27.3 ## 4 dose_2 VC 13.6 22.5 ## 5 dose_3 OJ 22.4 30.9 ## 6 dose_3 VC 18.5 33.9 library(ggplot2) ggplot()+ geom_errorbar(data=dat02.1, aes(x=dose, ymin=min_value, ymax=max_value), position = position_dodge(0.9), width=0.2)+ geom_boxplot(data=dat02,aes(x=dose,y=len,fill=supp), position = position_dodge(0.9)) 这种方式好像搞不定，这里我暂时想不到解决办法了，用另外一种方式吧 library(readxl) dat02&lt;-read_excel(&quot;example_data/05-boxplot/dat02.xlsx&quot;) library(tidyverse) library(ggplot2) ggplot(data=dat02,aes(x=dose,y=len,fill=supp))+ stat_boxplot(geom = &quot;errorbar&quot;, width=0.3, position = position_dodge(0.9))+ geom_boxplot(position = position_dodge(0.9)) 之前的作图函数介绍的都是geom_ 系列的函数，这里用到了stat_系列的函数 这个戏里的函数功能很强大，但是我平时用的不多，具体用法我也不太熟，这里就不过多介绍了 接下来是分组箱线图添加额外的注释信息，这个和上面介绍的普通柱形图是一样的 library(readxl) dat02&lt;-read_excel(&quot;example_data/05-boxplot/dat02.xlsx&quot;) library(tidyverse) library(ggplot2) ggplot(data=dat02,aes(x=dose,y=len,fill=supp))+ stat_boxplot(geom = &quot;errorbar&quot;, width=0.3, position = position_dodge(0.9))+ geom_boxplot(position = position_dodge(0.9))+ annotate(geom=&quot;text&quot;,x=1,y=25, label=&quot;Pvalue = 0.01&quot;,color=&quot;blue&quot;, fontface=&quot;italic&quot;)+ annotate(geom = &quot;segment&quot;, x = 0.6,y = 23, xend = 0.6,yend = 24, size=1)+ annotate(geom = &quot;segment&quot;, x = 0.6,y = 24, xend = 1.4,yend = 24, size=1)+ annotate(geom = &quot;segment&quot;, x = 1.4,y = 24, xend = 1.4,yend = 12, size=1) 5.3 接下来是小提琴图 小提琴图整体和箱线图的作图代码是一样 的，只需要我们把作图函数换成geom_violin() 用箱线图的数据来做演示 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_violin() 同样的可以更改边框 和填充颜色，如果四同意修改，就把参数写到aes()的外面，用真实颜色值，如果是根据不同的变量赋予不同的颜色就写到aes()的里面，用数据集的列名作为参数的值 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_violin(color=&quot;black&quot;,fill=&quot;grey&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_violin(aes(fill=var1)) 分组的小提琴图和箱线图的思路也是一样的 把上面分组箱线图的代码复制过来，把作图函数改成geom_violin() library(readxl) dat02&lt;-read_excel(&quot;example_data/05-boxplot/dat02.xlsx&quot;) library(ggplot2) ggplot(data=dat02,aes(x=dose,y=len,fill=supp))+ geom_violin() 如果要添加注释信息还是使用annotate()函数 还有一个比较常用的可视化方式是箱线图和小提琴图叠加到一起 library(readxl) dat02&lt;-read_excel(&quot;example_data/05-boxplot/dat02.xlsx&quot;) library(tidyverse) library(ggplot2) ggplot(data=dat02,aes(x=dose,y=len,fill=supp))+ geom_violin()+ stat_boxplot(geom = &quot;errorbar&quot;, width=0.3, position = position_dodge(0.9))+ geom_boxplot(position = position_dodge(0.9), width=0.2) 5.4 类似于箱线图/小提琴图的还有 抖动的散点图 geom_jitter() 蜂群图 需要借助额外的R包ggbeeswarm https://github.com/eclarke/ggbeeswarm 山脊图 借助额外的R包 ggridges https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html geom_jitter library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_jitter() ggplot(data=dat01,aes(x=var1,y=var2))+ geom_jitter(width=0.2,aes(color=var1)) 蜂群图 library(readxl) dat01&lt;-read_excel(&quot;example_data/05-boxplot/dat01_1.xlsx&quot;) head(dat01) ## # A tibble: 6 x 2 ## var1 var2 ## &lt;chr&gt; &lt;dbl&gt; ## 1 PAR_CH 0.571 ## 2 PAR_CH 0.432 ## 3 PAR_CH 0.645 ## 4 PAR_CH 0.590 ## 5 PAR_CH 0.740 ## 6 PAR_CH 0.591 library(ggplot2) library(ggbeeswarm) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_quasirandom() 这个点比较少可能看不出差别，我们用ggbeeswarm这个包帮助文档提供的例子看下 set.seed(12345) library(ggplot2) library(ggbeeswarm) #compare to jitter ggplot(iris,aes(Species, Sepal.Length)) + geom_jitter(color=&quot;red&quot;) ggplot(iris,aes(Species, Sepal.Length)) + geom_quasirandom(color=&quot;blue&quot;) 山脊图,这里直接用ggridges这个R包的帮助文档的例子 library(ggplot2) library(ggridges) ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = Month, fill = stat(x))) + geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) + scale_fill_viridis_c(name = &quot;Temp. [F]&quot;, option = &quot;C&quot;) + labs(title = &#39;Temperatures in Lincoln NE in 2016&#39;) ## Picking joint bandwidth of 3.37 最后是今天的实际例子，这个例子的代码来源于一篇Nature的论文 Environmental factors shaping the gut microbiome in a Dutch population dfToPlot&lt;-read.csv(&quot;example_data/05-boxplot/dfToPlot.csv&quot;) head(dfToPlot) ## BC_Spec BC_PWY BC_VF BC_CARD RELATIONSHIP.0 COHAB ## 1 0.5018598 0.1521802 0.8009368 0.7540197 RND.PAIR FALSE ## 2 0.6017878 0.1199416 0.9098667 0.6745180 RND.PAIR FALSE ## 3 0.6943654 0.1322052 0.8794888 0.4336659 PARTNERS TRUE ## 4 0.5504249 0.1195811 0.5355828 0.7883583 RND.PAIR FALSE ## 5 0.8220028 0.3994575 0.8408817 0.9276368 PAR_CH TRUE ## 6 0.7683990 0.3743061 0.9730157 0.9912979 RND.PAIR FALSE table(dfToPlot$RELATIONSHIP.0) ## ## PAR_CH PARTNERS RND.PAIR SIBL ## 285 1758 2000 144 dfToPlot$RELATIONSHIP.0 &lt;- factor(dfToPlot$RELATIONSHIP.0, levels=c(&quot;RND.PAIR&quot;,&quot;PARTNERS&quot;,&quot;PAR_CH&quot;,&quot;SIBL&quot;)) cbPalette &lt;- c(&quot;#E69F00&quot;, &quot;#CC79A7&quot;, &quot;#56B4E9&quot;, &quot;#009E73&quot;, &quot;#CC79A7&quot;, &quot;#F0E442&quot;, &quot;#999999&quot;,&quot;#0072B2&quot;,&quot;#D55E00&quot;) ggplot(data=dfToPlot,aes(x=RELATIONSHIP.0, y=BC_Spec, color=RELATIONSHIP.0))+ geom_jitter(alpha=0.2, position=position_jitterdodge(jitter.width = 0.35, jitter.height = 0, dodge.width = 0.8))+ geom_boxplot(alpha=0.2,width=0.45, position=position_dodge(width=0.8), size=0.75,outlier.colour = NA)+ geom_violin(alpha=0.2,width=0.9, position=position_dodge(width=0.8), size=0.75)+ scale_color_manual(values = cbPalette)+ theme_classic() + theme(legend.position=&quot;none&quot;) + theme(text = element_text(size=16)) + #ylim(0.0,1.3)+ ylab(&quot;Bray-Curtis distance of Species&quot;)+ #scale_x_discrete(labels=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;))+ annotate(&quot;segment&quot;, x = 1-0.01, y = 1, xend = 2.01,lineend = &quot;round&quot;, yend = 1,size=1,colour=&quot;black&quot;,arrow = arrow(length = unit(0.02, &quot;npc&quot;)))+ annotate(&quot;segment&quot;, x = 2.01, y = 1, xend = 0.99,lineend = &quot;round&quot;, yend = 1,size=1,colour=&quot;black&quot;,arrow = arrow(length = unit(0.02, &quot;npc&quot;)))+ annotate(&quot;text&quot;, x=1.5,y=1.01, label=expression(&quot;**&quot;~&quot;FDR&quot;~2.41%*%10^-10),vjust=0) -&gt; p4 p4 ## Warning in is.na(x): is.na() applied to non-(list or vector) of ## type &#39;expression&#39; "],["r语言ggplot2折线图.html", "Chapter 6 R语言ggplot2折线图 6.1 最基本的折线图 6.2 分组的折线图 6.3 添加线段 6.4 添加辅助线 6.5 面积图 6.6 实际例子", " Chapter 6 R语言ggplot2折线图 这一章主要介绍R语言ggplot2画线的函数，我能想到的有 geom_line() geom_path() geom_vline() geom_hline() geom_abline() geom_curve() geom_segment() geom_area() 面积图也可以看成是折线图的一种吧 geom_ribbon() 6.1 最基本的折线图 准备数据 一列x和一列y,这里根据x是离散型数据还是连续型数据分为两种情况， 当x是连续型数据的时候 作图代码 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat01.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_line() 线可以修改参数通常有 颜色 color 粗细 size 线型 lty 线型的种类可以参考这个链接 http://www.sthda.com/english/wiki/ggplot2-line-types-how-to-change-line-types-of-a-graph-in-r-software 比如 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat01.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_line(color=&quot;red&quot;,size=5,lty=&quot;dashed&quot;) 这里我们看到x轴的刻度不是按照1到10这样截断的，如果要修改的话需要用到scale_x_continues()函数 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat01.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_line(color=&quot;red&quot;,size=5,lty=&quot;dashed&quot;)+ scale_x_continuous(breaks = 1:10) 如果想要把散点也加上的话可以继续叠加geom_point()函数 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat01.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_line()+ geom_point() 折线图还有一个比较常用的操作是添加误差线，添加误差线的函数是geom_errorbar(),假设我们已经提前算好数据整理到excel里,整理的数据如下 作图代码 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat02.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_line()+ geom_point()+ geom_errorbar(aes(ymin=var2-sd_value, ymax=var2+sd_value), width=0.2) 有时候可能还需要添加置信区间，添加置信区间的用geom_ribbon()函数，还是提前算好置信区间，数据集整理格式如下 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat02_1.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_line()+ geom_point()+ geom_ribbon(aes(x=var1,ymin=lower95,ymax=upper95), fill=&quot;red&quot;,alpha=0.2) 以上是x轴是连续型数据的情况，接下来介绍x轴是离散型数据的情况 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat03.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_line()+ geom_point() ## geom_path: Each group consists of only one observation. Do you ## need to adjust the group aesthetic? 以上代码画不出来线，离散型数据还需要我们指定一个group=1参数 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat03.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2,group=1))+ geom_line()+ geom_point() 离散型数据比较常用的一个操作就是改变x轴的顺序，默认是按照首字母排序，如果想要按照我们自己要求的顺序来，我们给数据赋予因子水平 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat03.xlsx&quot;) dat01$var1&lt;-factor(dat01$var1, levels = c(&quot;B&quot;,&quot;D&quot;,&quot;C&quot;,&quot;A&quot;,&quot;E&quot;)) ggplot(data=dat01,aes(x=var1,y=var2,group=1))+ geom_line()+ geom_point() 这里需要注意的是赋予因子水平的时候levels参数后面跟的内容必须和数据里的字符完全一致，要不然会出现错误 以上的折线图在拐弯处都是很尖锐的，如果想要用平滑的线用ggplot2里的函数如何实现我暂时想不明白了，这里可以借助其他R包 ggbump 参考链接 https://github.com/davidsjoberg/ggbump 有时间可以自己研究一下，这里暂时不做介绍 6.2 分组的折线图 分组折线图需要在 x 和 y两列数据的基础上再增加一列表示分组，示例数据如下 作图代码 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat04.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2,group=group))+ geom_line()+ geom_point() 用颜色 线型来区分不同的分组 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat04.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2,group=group))+ geom_line(aes(color=group,lty=group))+ geom_point(aes(color=group,shape=group)) 分组数据添加误差线,再给数据集增加一列误差线数据 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat04_1.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2,group=group))+ geom_line(aes(color=group,lty=group))+ geom_point(aes(color=group,shape=group))+ geom_errorbar(aes(ymin=var2-sd_value, ymax=var2+sd_value, color=group), width=0.2) 分组添加置信区间 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat04_2.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2,group=group))+ geom_line(aes(color=group,lty=group))+ geom_point(aes(color=group,shape=group))+ geom_ribbon(aes(x=var1,ymin=lower95,ymax=upper95, color=group),alpha=0.2) 接下来是自定义这些 颜色 形状 等 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat04_2.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2,group=group))+ geom_line(aes(color=group,lty=group))+ geom_point(aes(color=group,shape=group))+ geom_ribbon(aes(x=var1,ymin=lower95,ymax=upper95, color=group),alpha=0.2)+ scale_color_manual(values = c(&quot;group_1&quot;=&quot;blue&quot;,&quot;group_2&quot;=&quot;darkgreen&quot;)) x轴是离散数据的分组折线图,基本上和连续型的数据是一样的 示例数据集如下 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat05.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2,group=group))+ geom_line(aes(color=group,lty=group)) 折线图x轴是时间型数据，比如如下示例 这种情况我个人建议是给数据集增加一列连续型的数据用来做x，然后再修改x轴的坐标轴标签，比如把数据集改成如下 作图代码 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat06.xlsx&quot;, sheet = &quot;Sheet2&quot;) ggplot(data=dat01,aes(x=var3,y=var2))+ geom_line()+ scale_x_continuous(breaks = 1:5, labels = dat01$var1) 以上内容作图都是用到的geom_line()函数，接下来介绍geom_path()函数 参考 https://ggplot2.tidyverse.org/reference/geom_path.html library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat07.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_line()+ geom_point() ggplot(data=dat01,aes(x=var1,y=var2))+ geom_path()+ geom_point() 从上图我们可以看出来geom_line()函数是按照x数值的大小从前往后连，geom_path()函数是按照数据集出现的顺序连 6.3 添加线段 添加线段用到的函数是 geom_segment() 直线 geom_curve() 曲线 比如一个简单的数据集 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat08.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_point(size=5) 在以上两个点之间添加一个线段 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat08.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_point(size=5)+ geom_segment(aes(x=2,xend=4,y=2,yend=2)) 如果是曲线 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat08.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_point(size=5)+ geom_curve(aes(x=2,xend=4,y=2,yend=2)) 曲线可以调节弧度,用到 curvature 参数 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat08.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_point(size=5)+ geom_curve(aes(x=2,xend=4,y=2,yend=2),curvature = 0.2) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_point(size=5)+ geom_curve(aes(x=2,xend=4,y=2,yend=2),curvature = -1) 添加箭头的话也是用到这两个函数 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat08.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_point(size=5)+ geom_segment(aes(x=2,xend=4,y=2,yend=2), arrow = arrow()) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_point(size=5)+ geom_curve(aes(x=2,xend=4,y=2,yend=2),curvature = 0.2, arrow = arrow()) 6.4 添加辅助线 https://ggplot2.tidyverse.org/reference/geom_abline.html 垂直辅助线 geom_vline() 只需要指定xintercept 水平辅助线 geom_hline() 只需要指定yintercept 带有角度的线段 geom_abline() 需要指定截距 intercept 和斜率 slope 接下来用鸢尾花的数据集做一个演示 library(ggplot2) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))+ geom_point()+ geom_vline(xintercept = 6,size=1,lty=&quot;solid&quot;,color=&quot;red&quot;) ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))+ geom_point()+ geom_hline(yintercept = 3,size=1,lty=&quot;solid&quot;,color=&quot;red&quot;) ggplot(data=iris,aes(x=Sepal.Length, y=Sepal.Width))+ geom_point()+ geom_abline(intercept = 4, slope =-0.2 , size=1, lty=&quot;solid&quot;,color=&quot;red&quot;) 6.5 面积图 用最基本的折线图数据做一个演示 library(readxl) library(ggplot2) dat01&lt;-read_excel(&quot;example_data/06-lineplot/dat01.xlsx&quot;) ggplot(data=dat01,aes(x=var1,y=var2))+ geom_area() ggplot(data=dat01,aes(x=var1,y=var2))+ geom_area(fill=&quot;red&quot;,color=&quot;blue&quot;,alpha=0.2) 6.6 实际例子 library(pacman) p_load(tidyverse, showtext, ggtext) #eurovision_raw &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-17/eurovision.csv&#39;) #readr::write_csv(eurovision_raw,file = &quot;eurovision_raw.csv&quot;) eurovision_raw &lt;- readr::read_csv(&quot;example_data/06-lineplot/eurovision_raw.csv&quot;) ## Rows: 2005 Columns: 18 ## -- Column specification ------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (12): event, host_city, host_country, event_url, section, a... ## dbl (4): year, running_order, total_points, rank ## lgl (2): qualified, winner ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. eurovision &lt;- eurovision_raw %&gt;% filter(year &gt;= 2005, section == &quot;grand-final&quot;) # This is the first year where the &#39;grand-final&#39; happens # Analysis ---------------------------------------------------------------- highest_scores_by_rank &lt;- eurovision %&gt;% filter(rank &lt;= 3) %&gt;% group_by(rank) %&gt;% slice_max(total_points, n = 1) %&gt;% ungroup() %&gt;% select(year, artist_country, total_points) # Margin between 1st and 2nd eurovision %&gt;% select(rank, total_points, year) %&gt;% filter(rank &lt;= 2) %&gt;% group_by(year) %&gt;% arrange(rank) %&gt;% mutate(margin = total_points - lag(total_points)) %&gt;% ungroup() %&gt;% filter(rank == 2) %&gt;% slice_min(margin, n = 1) ## # A tibble: 1 x 4 ## rank total_points year margin ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2 218 2009 -169 eurovision %&gt;% mutate(rank = factor(rank)) %&gt;% ggplot(aes(year, total_points, group = rank, color = rank)) + geom_line(data = eurovision %&gt;% filter(rank &gt; 3), color = &quot;grey75&quot;, size = .25, alpha = .5) + geom_line(data = eurovision %&gt;% filter(rank == 3), color = &quot;#0FB5AE&quot;, size = .75) + geom_line(data = eurovision %&gt;% filter(rank == 2), color = &quot;#4046CA&quot;, size = .75) + geom_line(data = eurovision %&gt;% filter(rank == 1), color = &quot;#F68511&quot;, size = .75) + geom_point(data = eurovision %&gt;% filter(year == 2017, rank == 1), shape = 21, color = &quot;white&quot;, fill = &quot;#F68511&quot; , size = 1.5) + geom_point(data = eurovision %&gt;% filter(year == 2009, rank == 1), shape = 21, color = &quot;white&quot;, fill = &quot;#F68511&quot; , size = 1.5) + geom_point(data = eurovision %&gt;% filter(year == 2009, rank == 2), shape = 21, color = &quot;white&quot;, fill = &quot;#4046CA&quot; , size = 1.5) + annotate(geom = &quot;segment&quot;, x = 2009, xend = 2009, y = 218 + 169, yend = 218, size = .1, color = &quot;black&quot;) + annotate(&quot;text&quot;, x = 2017, y = highest_scores_by_rank$total_points[1] + 30, label = highest_scores_by_rank$total_points[1], hjust = .5, color = &quot;#F68511&quot;, family = &quot;serif&quot;, fontface = &quot;bold&quot;, size = 6) + annotate(&quot;text&quot;, x = 2009.1, y = 218 + 169 + 30, label = 218 + 169, hjust = 0, color = &quot;#F68511&quot;, family = &quot;serif&quot;, fontface = &quot;bold&quot;, size = 6) + annotate(&quot;text&quot;, x = 2009.1, y = 218 + 30, label = 218, hjust = 0, color = &quot;#4046CA&quot;, family = &quot;serif&quot;, fontface = &quot;bold&quot;, size = 6) + coord_cartesian(expand = c(0, 0), ylim = c(0, 800)) + theme_minimal(base_family = &quot;serif&quot;) + labs(x = NULL, y = &quot;Total points&quot;, title = &quot;EUROVISION points are trending upwards&quot;, subtitle = &quot;The upward gradual trend reflects that countries need more points to come &lt;span style=&#39;color:#F68511&#39;&gt;**first**&lt;/span&gt;, &lt;span style=&#39;color:#4046CA&#39;&gt;**second**&lt;/span&gt;, and &lt;span style=&#39;color:#0FB5AE&#39;&gt;**third**&lt;/span&gt;&lt;br&gt;with each new edition&quot;, caption = &quot;Visualization by Pablo Alvarez | Data from Eurovision&quot; ) + theme( plot.margin = margin(rep(10, 4)), panel.grid = element_blank(), panel.grid.major = element_line(size = .15, color = &quot;grey75&quot;), plot.background = element_rect(fill = &quot;grey90&quot;, color = &quot;grey90&quot;), panel.background = element_rect(fill = &quot;grey90&quot;, color = &quot;grey90&quot;), axis.title.y = element_text(angle = 90, hjust = .99, size = 16.5, color = &quot;grey25&quot;), axis.title.x = element_text(hjust = 0, size = 20, color = &quot;grey15&quot;), axis.text = element_text(size = 16, color = &quot;grey50&quot;), axis.line = element_line(color = &quot;grey75&quot;, size = .15), plot.title = element_text(size = 32, color = &quot;black&quot;, family = &quot;serif&quot;, hjust = 0), plot.subtitle = element_markdown(size = 16, color = &quot;black&quot;, family = &quot;serif&quot;, hjust = 0, margin = margin(b = 20, t = 1), lineheight = .35), plot.caption = element_text(size = 18, color = &quot;grey50&quot;, hjust = 0, margin = margin(t = 20), lineheight = .3) ) ## Warning in if (!expand) {: the condition has length &gt; 1 and only ## the first element will be used ## Warning in if (!expand) {: the condition has length &gt; 1 and only ## the first element will be used "],["r语言ggplot2饼状图.html", "Chapter 7 R语言ggplot2饼状图 7.1 最基本的饼状图 7.2 中间空心的饼状图 7.3 其他效果的饼状图 7.4 其中某一块可以离开的饼图 7.5 多层嵌套的饼状图 7.6 一次性画很多个饼状图 7.7 饼状图的两个实例", " Chapter 7 R语言ggplot2饼状图 饼状图主要用来展示比例，R语言ggplot2包好像没有专门画饼状图的函数，ggplot2的实现方式是先画堆积柱形图，然后再极坐标的形式转换成饼图，这里极坐标具体的含义我也不懂，这里先记住这个名词 7.1 最基本的饼状图 最基本的数据格式如下 第一列是变量的名字，第二列是变量的数值，这里数值可以先不用转换成比例 作图代码 参考链接 http://www.sthda.com/english/wiki/ggplot2-pie-chart-quick-start-guide-r-software-and-data-visualization 堆积柱形图代码 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1) 加上极坐标转换成饼状图 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=20) start参数可以让饼状图顺时针或者逆时针旋转 饼状图最常用的一个操作是在给个部分添加上文字展示真实的比例值，这里我们使用annotate()函数,这个比例值需要自己先算一下 这里需要注意的一个地方是坐标，原来的坐标跟极坐标之间是如何转化的我还没有搞明白，我的做法是先随便指定一个位置，然后根据这个文本在图中出现的位置然后调试 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0)+ annotate(geom = &quot;text&quot;,x=1,y=90,label=&quot;20%&quot;) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0)+ annotate(geom = &quot;text&quot;,x=1,y=90,label=&quot;20%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=60,label=&quot;30%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=20,label=&quot;50%&quot;) 然后是自定义颜色 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0)+ annotate(geom = &quot;text&quot;,x=1,y=90,label=&quot;20%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=60,label=&quot;30%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=20,label=&quot;50%&quot;)+ scale_fill_manual(values = c(&quot;A&quot;=&quot;#7f7f7f&quot;, &quot;B&quot;=&quot;#fe0904&quot;, &quot;D&quot;=&quot;#f9b54f&quot;)) 饼状图的文本一种比较方便的处理方式是直接添加到图例的文本位置上 修改图例的文本，可以在自定义颜色的参数里添加上labels参数 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0)+ annotate(geom = &quot;text&quot;,x=1,y=90,label=&quot;20%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=60,label=&quot;30%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=20,label=&quot;50%&quot;)+ scale_fill_manual(values = c(&quot;A&quot;=&quot;#7f7f7f&quot;, &quot;B&quot;=&quot;#fe0904&quot;, &quot;D&quot;=&quot;#f9b54f&quot;), labels=c(&quot;A&quot;= &quot;A (20%)&quot;, &quot;B&quot; = &quot;B (30%)&quot;, &quot;D&quot; = &quot;D (50%)&quot;)) 饼状图通常是没有背后的灰色背景之类的，通过设置主题把这些全部去掉 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0)+ annotate(geom = &quot;text&quot;,x=1,y=90,label=&quot;20%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=60,label=&quot;30%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=20,label=&quot;50%&quot;)+ scale_fill_manual(values = c(&quot;A&quot;=&quot;#7f7f7f&quot;, &quot;B&quot;=&quot;#fe0904&quot;, &quot;D&quot;=&quot;#f9b54f&quot;))+ theme_void() 以上是最基本的饼状图 7.2 中间空心的饼状图 通过设置x坐标的范围来实现其中的空心效果 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0)+ annotate(geom = &quot;text&quot;,x=1,y=90,label=&quot;20%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=60,label=&quot;30%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=20,label=&quot;50%&quot;)+ scale_fill_manual(values = c(&quot;A&quot;=&quot;#7f7f7f&quot;, &quot;B&quot;=&quot;#fe0904&quot;, &quot;D&quot;=&quot;#f9b54f&quot;))+ theme_void()+ xlim(0,NA) 7.3 其他效果的饼状图 上面极坐标的参数是y,如果把参数改成x library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,width=1)+ coord_polar(&quot;x&quot;, start=0)+ annotate(geom = &quot;text&quot;,x=1,y=90,label=&quot;20%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=60,label=&quot;30%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=20,label=&quot;50%&quot;)+ scale_fill_manual(values = c(&quot;A&quot;=&quot;#7f7f7f&quot;, &quot;B&quot;=&quot;#fe0904&quot;, &quot;D&quot;=&quot;#f9b54f&quot;))+ theme_void() 普通的柱形图加上极坐标转化的效果 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) library(ggplot2) ggplot(data=dat01,aes(x=var1,y=var2,fill=var1))+ geom_bar(stat=&quot;identity&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0)+ annotate(geom = &quot;text&quot;,x=1,y=90,label=&quot;20%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=60,label=&quot;30%&quot;)+ annotate(geom = &quot;text&quot;,x=1,y=20,label=&quot;50%&quot;)+ scale_fill_manual(values = c(&quot;A&quot;=&quot;#7f7f7f&quot;, &quot;B&quot;=&quot;#fe0904&quot;, &quot;D&quot;=&quot;#f9b54f&quot;))+ theme_void() 以上文本位置都对不上，需要我们单独调节 7.4 其中某一块可以离开的饼图 这个用ggplot2如何实现我暂时想不到，这里需要借助另外的R包ggforce,大家如果想要这种效果的话可以参考一下这个视频 https://www.bilibili.com/video/BV1Sa411w7cP?spm_id_from=333.999.0.0 这里就不介绍代码了 7.5 多层嵌套的饼状图 多层嵌套的饼状图和一组的思路是一样的，我们多准备几组数据既可以了 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) dat02&lt;-read_excel(&quot;example_data/07-pieplot/dat02.xlsx&quot;) library(ggplot2) ggplot()+ geom_bar(data=dat01,aes(x=1,y=var2,fill=var1), stat=&quot;identity&quot;,position = &quot;stack&quot;,width=0.5)+ geom_bar(data=dat02,aes(x=2,y=var2,fill=var1), stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0) 第二组数据里如果没有其中某个变量就会空白出来一部分 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) dat03&lt;-read_excel(&quot;example_data/07-pieplot/dat03.xlsx&quot;) library(ggplot2) ggplot()+ geom_bar(data=dat01,aes(x=1,y=var2,fill=var1), stat=&quot;identity&quot;,position = &quot;stack&quot;,width=0.5)+ geom_bar(data=dat03,aes(x=2,y=var2,fill=var1), stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0) 叠加三组数据 library(readxl) dat01&lt;-read_excel(&quot;example_data/07-pieplot/dat01.xlsx&quot;) dat03&lt;-read_excel(&quot;example_data/07-pieplot/dat03.xlsx&quot;) dat04&lt;-read_excel(&quot;example_data/07-pieplot/dat04.xlsx&quot;) library(ggplot2) ggplot()+ geom_bar(data=dat01,aes(x=1,y=var2,fill=var1), stat=&quot;identity&quot;,position = &quot;stack&quot;,width=0.5)+ geom_bar(data=dat03,aes(x=2,y=var2,fill=var1), stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ geom_bar(data=dat04,aes(x=3,y=var2,fill=var1), stat=&quot;identity&quot;,position = &quot;stack&quot;,width=1)+ coord_polar(&quot;y&quot;, start=0) 7.6 一次性画很多个饼状图 这个用ggplot2如何实现我暂时也想不到了，这里借助额外的R包scatterpie,这里用之前B站录制过的视频介绍 https://www.bilibili.com/video/BV1nb4y1f75k?spm_id_from=333.999.0.0 示例数据集如下 df&lt;-read.csv(&quot;example_data/07-pieplot/mutilpie_example.csv&quot;,header=T) df ## x y A B ## 1 2 2 8 92 ## 2 4 2 96 4 ## 3 6 2 22 78 ## 4 8 2 35 65 ## 5 10 2 41 59 ## 6 12 2 80 20 ## 7 14 2 3 97 ## 8 2 4 86 14 ## 9 4 4 57 43 ## 10 6 4 10 90 ## 11 8 4 55 45 ## 12 10 4 98 2 ## 13 12 4 25 75 ## 14 14 4 94 6 ## 15 2 6 83 17 ## 16 4 6 50 50 ## 17 6 6 70 30 ## 18 8 6 20 80 ## 19 10 6 99 1 ## 20 12 6 63 37 ## 21 14 6 71 29 ## 22 2 8 61 39 ## 23 4 8 51 49 ## 24 6 8 84 16 ## 25 8 8 27 73 ## 26 10 8 72 28 ## 27 12 8 48 52 ## 28 14 8 60 40 #install.packages(&quot;scatterpie&quot;) library(scatterpie) library(ggplot2) ggplot()+ geom_scatterpie(data=df, aes(x,y,r=0.9), cols = c(&quot;A&quot;,&quot;B&quot;))+ coord_equal()+ theme_void()+ theme(legend.position = &quot;none&quot;)+ scale_fill_manual(values = c(&quot;#5b9bd5&quot;,&quot;#e64b35&quot;)) 7.7 饼状图的两个实例 library(tidyverse) library(cowplot) tuesdata_occupation &lt;- readr::read_csv(&quot;example_data/07-pieplot/20220530_piechart.csv&quot;) ## Rows: 10 Columns: 3 ## -- Column specification ------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (2): Group, Occupation ## dbl (1): Percentage ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. dat = tuesdata_occupation %&gt;% janitor::clean_names() %&gt;% mutate(plot_perc = percentage / sum(percentage)) %&gt;% mutate(plot_perc = (plot_perc * 61)/100) %&gt;% bind_rows(tibble(group = c(&quot;Negroes&quot;, &quot;Whites&quot;), occupation = c(&quot;empty&quot;, &quot;empty&quot;), percentage = c(0,0), plot_perc = c(0.195, 0.195))) %&gt;% mutate(occupation = factor(occupation, levels = c(&quot;Agriculture, Fisheries and Mining&quot;, &quot;Domestic and Personal Service&quot;, &quot;Manufacturing and Mechanical Industries&quot;, &quot;Trade and Transportation&quot;, &quot;Professions&quot;, &quot;Empty&quot;))) %&gt;% arrange(desc(group), occupation) %&gt;% mutate(ypos = cumsum(plot_perc)- 0.5*plot_perc) %&gt;% arrange(occupation) lab_dat = dat %&gt;% select(occupation) %&gt;% distinct() %&gt;% drop_na() %&gt;% mutate(x = c(-1.5, 1.5, -1.5, 1.5, 1.5), y = c(4, 5, 2, 1, 3), occupation = case_when( occupation == &quot;Agriculture, Fisheries and Mining&quot; ~ &quot;AGRICULTURE, FISHERIES\\nAND MINING.&quot;, occupation == &quot;Domestic and Personal Service&quot; ~ &quot;DOMESTIC AND\\nPERSONAL SERVICE.&quot;, occupation == &quot;Manufacturing and Mechanical Industries&quot; ~ &quot;MANUFACTURING AND\\nMECHANICAL INDUSTRIES.&quot;, occupation == &quot;Trade and Transportation&quot; ~ &quot;TRADE AND\\nTRANSPORTATION.&quot;, occupation == &quot;Professions&quot; ~ &quot;PROFESSIONS.&quot; )) dat ## # A tibble: 12 x 5 ## group occupation percentage plot_perc ypos ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Whites Agriculture, Fisheries and ~ 64 0.196 0.0979 ## 2 Negroes Agriculture, Fisheries and ~ 62 0.190 0.593 ## 3 Whites Domestic and Personal Servi~ 5.5 0.0168 0.204 ## 4 Negroes Domestic and Personal Servi~ 28 0.0857 0.731 ## 5 Whites Manufacturing and Mechanica~ 12.5 0.0383 0.232 ## 6 Negroes Manufacturing and Mechanica~ 5 0.0153 0.781 ## 7 Whites Trade and Transportation 13 0.0398 0.271 ## 8 Negroes Trade and Transportation 4.5 0.0138 0.796 ## 9 Whites Professions 4 0.0122 0.297 ## 10 Negroes Professions 0.8 0.00245 0.804 ## 11 Whites &lt;NA&gt; 0 0.195 0.401 ## 12 Negroes &lt;NA&gt; 0 0.195 0.902 pie = ggplot(dat, aes(y = &quot;&quot;, x = plot_perc, fill = occupation, group = group)) + geom_col(aes(color = occupation == &quot;empty&quot;)) + coord_polar(start = pi - (55*pi)/180) + scale_fill_manual(values = c(&quot;#b8243c&quot;, &quot;#f2c50a&quot;, &quot;#5a6796&quot;, &quot;#d5c8b7&quot;, &quot;#ab927a&quot;), na.translate = F) + theme_void() + theme(legend.position = &quot;none&quot;, plot.background = element_rect(color = NA, fill = &quot;#ece5d5&quot;), text = element_text(family = &quot;mono&quot;), plot.title = element_text(hjust = .5, face = &quot;bold&quot;), plot.margin = unit(rep(.5,4), &quot;cm&quot;)) + geom_text(aes(x = ypos, label = ifelse(occupation == &quot;empty&quot;, NA, glue::glue(&quot;{round(percentage,1)}%&quot;))), nudge_y = .35, family = &quot;mono&quot;) + annotate(geom = &quot;text&quot;, x = 0.65, y = 1.5, label = &quot;NEGROES.&quot;, family = &quot;mono&quot;) + annotate(geom = &quot;text&quot;, x = 0.15, y = 1.5, label = &quot;WHITES.&quot;, family = &quot;mono&quot;) + scale_color_manual(values = c(&quot;#5f4e3b&quot;, NA)) + guides(color = guide_none()) + labs(title = &quot;OCCUPATIONS OF NEGROES AND WHITES IN GEORGIA.&quot;) pie ## Warning: Removed 2 rows containing missing values (geom_text). legend = ggplot(lab_dat, aes(x,y, fill = occupation)) + geom_point(shape = 21, size = 10) + geom_text(data = lab_dat %&gt;% filter(x == -1.5), aes(label = occupation), nudge_x = .55, family = &quot;mono&quot;, size = 3) + geom_text(data = lab_dat %&gt;% filter(x == 1.5), aes(label = occupation), nudge_x = -.4, family = &quot;mono&quot;, size = 3) + scale_fill_manual(values = c(&quot;#b8243c&quot;, &quot;#f2c50a&quot;, &quot;#5a6796&quot;, &quot;#d5c8b7&quot;, &quot;#ab927a&quot;), na.translate = F) + theme_void() + theme(text = element_text(family = &quot;mono&quot;), legend.position = &quot;none&quot;, aspect.ratio = .3) + coord_cartesian(clip = &quot;off&quot;) ggdraw(plot = pie) + draw_plot(legend, scale = .7) ## Warning: Removed 2 rows containing missing values (geom_text). 第二个实例 library(tidyverse) library(gggibbous) team_passing&lt;-readr::read_csv(&quot;example_data/07-pieplot/20220530_piechart_01.csv&quot;) ## Rows: 125 Columns: 7 ## -- Column specification ------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (2): Squad, Comp ## dbl (5): Season_End_Year, Left, Right, total, ratio ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. team_info&lt;-readr::read_csv(&quot;example_data/07-pieplot/team_info.csv&quot;) ## Rows: 467 Columns: 27 ## -- Column specification ------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (26): team_name, Squad, team_short_name, team_abbreviation,... ## dbl (1): team_id ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. limits=c(0,2) team_passing %&gt;% filter(Comp == &quot;Premier League&quot;) %&gt;% left_join(team_info %&gt;% select(Squad, Primary, Secondary)) %&gt;% #bind_rows(team_passing %&gt;% # filter(Comp == &quot;Premier League&quot;) %&gt;% # mutate(ratio=1)) %&gt;% ggplot()+ geom_moon(aes(ratio=ratio, fill=Secondary), x=1, y=1, right=FALSE, size=20)+ geom_moon(aes(ratio=1-ratio, fill=Primary), x=1, y=1, right=TRUE, size=20)+ geom_text(aes(label = paste0(format(round((1-ratio)*100,1), nsmall=1), &quot;%&quot;)), x=1.25, y=1, size=2, family=&quot;serif&quot;, color=&quot;white&quot;)+ coord_cartesian(xlim=limits, ylim=limits)+ facet_wrap(~reorder(Squad,-ratio),ncol = 8)+ scale_fill_identity()+ theme_void()+ theme(legend.position = &quot;none&quot;, #text=element_text(size=40, family = &quot;serif&quot;), #plot.caption=element_text(size=14), #plot.subtitle = element_text(size=18), plot.margin = margin(.2,.2,.2,.2, unit=&quot;in&quot;))+ labs(title= &quot;What foot do Premier League teams pass with?&quot;, subtitle= &quot;2021-2022 Premier League season\\n&quot;, caption= &quot;Plot: @etmckinley | data: StatsBomb via FBRef and {worldfootballr}&quot;) ## Joining, by = &quot;Squad&quot; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
